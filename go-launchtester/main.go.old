package main

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"os/exec"
	"runtime"

	"drixevel.dev/launchtester/internal/config"
	"github.com/iancoleman/orderedmap"
)

const (
	dirPrefix    = "D:/sourcemod/servers"     //Windows Only
	dirPrefixWSL = "/mnt/d/sourcemod/servers" //Linux Only
)

type Config struct {
	ServerDirectories []string              `json:"serverDirectories"`
	ServerConnects    orderedmap.OrderedMap `json:"serverConnects"`
}

func getPath(path string) string {
	//Change the prefix of the path depending on if it's Windows or Linux.
	var prefix string
	if runtime.GOOS == "linux" {
		prefix = dirPrefixWSL
	} else {
		prefix = dirPrefix
	}

	//Format a valid path.
	fPath := fmt.Sprintf("%s/%s/start.bat", prefix, path)
	return fPath
}

func contains(s []string, str string) bool {
	for _, v := range s {
		if v == str {
			return true
		}
	}

	return false
}

func main() {
	//Parse the config.json file.
	var cfg Config
	if err := config.ParseConfig(&cfg); err != nil {
		log.Fatal(err)
	}

	//Choose a game to setup the work environment for.
	fmt.Printf("Choose a game you would like to launch the game and test server for:\nAvailable Options: %v\nInput: ", cfg.ServerDirectories)

	//Accept an input.
	input := bufio.NewScanner(os.Stdin)
	input.Scan()
	game := input.Text()

	//Generate a path for the input.
	path := getPath(game)

	//Start the test server.
	fmt.Println("Starting the test server...")
	exec.Command(path).Start()

	//Start the game and connect to the test server.
	ip, ok := cfg.ServerConnects.Get(game)

	if !ok {
		log.Fatalf("error while finding ip for %s", game)
	}

	fmt.Println("Starting game...")
	var url = fmt.Sprintf("steam://connect/%s", ip)
	exec.Command("rundll32", "url.dll,FileProtocolHandler", url).Start()

	//Starts VSCode just cuz.
	exec.Command("code").Start()
}
